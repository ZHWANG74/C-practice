//
//  binary_search_vector.cpp
//  practing c++
//
//  Created by 呆呆 on 2022/9/24.
//

#include "binary_search_vector.hpp"
#include<vector>
#include<iostream>

using namespace std;
template <typename T>

// 为了简便起见, 没有使用vector<T>::const_iterator
bool binary_search_vector(const T& key, typename vector<T>::iterator data, size_t N)
{
    size_t low = 0;
    size_t high = N;
    while(low < high)
    {
        size_t mid = low + (high-low)/2;
        if (key < *(data + mid))
            high = mid;
        else if (*(data+mid) < key)
            low = mid+1;
        else
            return true;
    }
    return false;
}

// 使用迭代器, 描述更清晰, 而且还可支持数组.
template<typename T, typename iterator>
bool binary_search_iterator(const T& key, iterator L, iterator R)
{
    while(L < R)
    {
        iterator M = L + (R-L)/2;
        if(key < *M)
            R = M;
        else if (*M < key)
            L = M + 1;
        else
            return true;
    }
    return false;
}

int main()
{
    vector<int> V {1, 2, 3, 4, 5};
    cout << binary_search_vector(2, V.begin(), 5) << endl;
    cout << binary_search_vector(0, V.begin(), 5) << endl;
    cout << binary_search_vector(2, V.begin() + 2, 3) << endl;
    cout << binary_search_vector(0, V.begin(), 0) << endl;
    cout << binary_search_iterator(2, V.begin(), V.end()) << endl;
    cout << binary_search_iterator(0, V.begin(), V.end()) << endl;
    cout << binary_search_iterator(2, V.begin() + 2, V.end()) << endl;
    cout << binary_search_iterator(0, V.begin(), V.end()) << endl;
    return 0;
}
